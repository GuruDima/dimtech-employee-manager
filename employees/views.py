from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required, user_passes_test
from django.views.decorators.http import require_POST
from django.contrib import messages
from django.http import HttpResponse
from django.core.paginator import Paginator
from django.db.models import Q, Avg, Count
from django.contrib.auth.forms import UserCreationForm

from .models import Employee
from .forms import EmployeeForm
import openpyxl

# –ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å staff
def is_staff_user(user):
    return user.is_staff


# üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
@login_required
def employee_list(request):
    query = request.GET.get("q")
    position = request.GET.get("position")
    level = request.GET.get("level")
    sort = request.GET.get("sort")

    employees = Employee.objects.all()

    if query:
        employees = employees.filter(
            Q(first_name__icontains=query) | Q(last_name__icontains=query)
        )
    if position:
        employees = employees.filter(position=position)
    if level:
        employees = employees.filter(level=level)

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    sort_options = {
        "name_asc": "first_name",
        "name_desc": "-first_name",
        "salary_asc": "salary",
        "salary_desc": "-salary",
        "level_asc": "level",
        "level_desc": "-level",
        "date_asc": "date_hired",
        "date_desc": "-date_hired"
    }
    if sort in sort_options:
        employees = employees.order_by(sort_options[sort])

    paginator = Paginator(employees, 6)
    page_number = request.GET.get("page")
    page_obj = paginator.get_page(page_number)

    positions = Employee.objects.values_list("position", flat=True).distinct()
    levels = Employee.LEVEL_CHOICES

    return render(request, "employees/employee_list.html", {
        "employees": page_obj,
        "positions": positions,
        "levels": levels
    })


# ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@login_required
@user_passes_test(is_staff_user)
def employee_create(request):
    form = EmployeeForm(request.POST or None, request.FILES or None)
    if form.is_valid():
        form.save()
        messages.success(request, "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
        return redirect("employees:employee_list")
    return render(request, "employees/employee_form.html", {"form": form})


# ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@login_required
@user_passes_test(is_staff_user)
def employee_update(request, pk):
    employee = get_object_or_404(Employee, pk=pk)
    form = EmployeeForm(request.POST or None, request.FILES or None, instance=employee)
    if form.is_valid():
        form.save()
        messages.success(request, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        return redirect("employees:employee_list")
    return render(request, "employees/employee_form.html", {"form": form})


@login_required
@user_passes_test(is_staff_user)
def employee_delete(request, pk):
    employee = get_object_or_404(Employee, pk=pk)

    if request.method == "POST":
        employee.delete()
        messages.success(request, "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–¥–∞–ª—ë–Ω.")
        return redirect("employees:employee_list")

    return render(request, "employees/employee_delete.html", {"employee": employee})



# üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@login_required
def employee_detail(request, pk):
    employee = get_object_or_404(Employee, pk=pk)
    return render(request, "employees/employee_detail.html", {"employee": employee})


# üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def signup_view(request):
    if request.method == "POST":
        form = UserCreationForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
            return redirect("employees:login")
    else:
        form = UserCreationForm()
    return render(request, "employees/signup.html", {"form": form})


# üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
@login_required
@user_passes_test(is_staff_user)
def export_employees_excel(request):
    employees = Employee.objects.all()
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.append(["ID", "–ò–º—è", "–§–∞–º–∏–ª–∏—è", "–î–æ–ª–∂–Ω–æ—Å—Ç—å", "–û–∫–ª–∞–¥", "–£—Ä–æ–≤–µ–Ω—å", "Email", "–¢–µ–ª–µ—Ñ–æ–Ω", "–î–∞—Ç–∞ –ø—Ä–∏—ë–º–∞"])

    for emp in employees:
        ws.append([
            emp.id, emp.first_name, emp.last_name, emp.position,
            emp.salary, emp.get_level_display(), emp.email,
            emp.phone, emp.date_hired.strftime("%Y-%m-%d") if emp.date_hired else ""

        ])

    response = HttpResponse(content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
    response["Content-Disposition"] = "attachment; filename=employees.xlsx"
    wb.save(response)
    return response


# üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
@login_required
def employee_stats(request):
    total = Employee.objects.count()
    avg_salary = Employee.objects.aggregate(avg=Avg("salary"))["avg"]
    levels = (
        Employee.objects
        .values("level")
        .annotate(count=Count("id"))
        .order_by("level")
    )

    level_display = dict(Employee.LEVEL_CHOICES)
    for level in levels:
        level["label"] = level_display.get(level["level"], level["level"])

    return render(request, "employees/employee_stats.html", {
        "total": total,
        "avg_salary": avg_salary,
        "levels": levels
    })


# üß± –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—à–∏–±–æ–∫
def custom_403(request, exception=None):
    return render(request, "403.html", status=403)

def custom_404(request, exception=None):
    return render(request, "404.html", status=404)
